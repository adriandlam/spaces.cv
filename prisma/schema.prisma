// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ContactType {
  EMAIL
  PHONE
  WEBSITE
  X
  LINKEDIN
  GITHUB
  DISCORD
  LINK
}

enum FontFamily {
  SANS
  SERIF
  MONO
}

enum Theme {
  LIGHT
  DARK
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  username      String?
  onboarded     Boolean   @default(false)
  onboardedAt   DateTime?

  customStatus String?

  // Profile fields
  title    String? // What do you do?
  about    String? // About section
  location String? // Location
  website  String? // Website URL

  // Relations
  projects           Project[]
  education          Education[]
  workExperiences    WorkExperience[]
  contacts           Contact[]
  profilePreferences ProfilePreferences?

  profileOrder String[] @default(["experience", "education", "projects", "contacts"])

  @@unique([email])
  @@unique([username])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token, userId])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@unique([userId])
  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@unique([identifier])
  @@map("verification")
}

model Project {
  id            String   @id @default(cuid())
  title         String
  year          String
  description   String
  company       String?
  link          String?
  collaborators String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  skills        String[] @default([])

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("project")
}

model Education {
  id           String   @id @default(cuid())
  from         String
  to           String
  degree       String
  institution  String
  location     String?
  url          String?
  description  String?
  classmates   String?
  fieldOfStudy String?
  gpa          String?
  activities   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  hidden       Boolean  @default(false)

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("education")
}

model WorkExperience {
  id          String   @id @default(cuid())
  title       String
  company     String
  from        String
  to          String? // Can be null for current job
  location    String?
  description String?
  skills      String[] @default([])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("work_experience")
}

model Contact {
  id        String      @id @default(cuid())
  type      ContactType
  value     String
  href      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  hidden    Boolean     @default(false)

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("contact")
}

model ProfilePreferences {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Visibility & Publishing
  hidden         Boolean @default(false)
  googleIndexing Boolean @default(true)

  // Appearance
  fontFamily FontFamily @default(SANS)
  theme      Theme      @default(DARK)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profile_preferences")
}
